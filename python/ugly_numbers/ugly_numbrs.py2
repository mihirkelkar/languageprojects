import sys
import re

def depth(number):
  if number > 0:
    final_list = []
    return_list = depth(number - 1)
    if return_list:
      for ii in [" ", "-", "+"]:
        for element in return_list:
          final_list.append(ii + element)
      return final_list
    else:
      return [" ", "-", "+"]
  else:
    return []

def find_leading_octal_conflicts(num_string):
  for ii in re.findall(r"[+-]0\d+", num_string):
    num_string = num_string.replace(ii, ii[1])
  return num_string 
    
def find_if_ugly(num_string):
  num_string = find_leading_octal_conflicts(num_string)
  number = eval(num_string)
  for ii in [2,3,5,7]:
    if number % ii == 0:
      #print num_string
      #print "========="
      #print number
      #print "*********"
      return 1
  return 0

def ugly_function(number):
  neg = 0
  ugly_count = 0
  ugly_list = [re.sub("^0","",number)]
  if number[0] == "-":
    neg = 1
    number = number[1:]
  depth_num = len(number) - 1
  return_list = depth(depth_num)
  for ii in return_list:
    new_string = ""
    for num in range(0, len(number)):
      new_string += number[num]
      if num < len(ii):
        new_string += ii[num]
    if neg == 1:
      new_string = '-' + new_string
    new_string = new_string.replace(" ","")
    new_string = re.sub("^0","",new_string)
    ugly_list.append(new_string)
    #print ugly_list
  for ii in list(set(ugly_list)):
    ugly_count += find_if_ugly(ii)
  print ugly_count

def main():
  fp = open(sys.argv[1], "r").readlines()
  for line in fp:
    ugly_function(line.strip())

main()     
