"""
A positive integer is a palindrome if its decimal representation (without leading zeros) is a palindromic string (a string that reads the same forwards and backwards). For example, the numbers 5, 77, 363, 4884, 11111, 12121 and 349943 are palindromes. 

A range of integers is interesting if it contains an even number of palindromes. The range [L, R], with L <= R, is defined as the sequence of integers from L to R (inclusive): (L, L+1, L+2, ..., R-1, R). L and R are the range's first and last numbers. 

The range [L1,R1] is a subrange of [L,R] if L <= L1 <= R1 <= R. Your job is to determine how many interesting subranges of [L,R] there are.

INPUT SAMPLE:

Your program should accept as its first argument a path to a filename. Each line in this file is one test case. Each test case will contain two positive integers, L and R (in that order), separated by a space. eg. 
1 2
1 7
87 88
OUTPUT SAMPLE:

For each line of input, print out the number of interesting subranges of [L,R] eg. 
1
12
1
"""
import sys

def is_palindrome(number):
  return True if number[::-1] == number else False

def palindrome_range(left, right):
  palindrome_list = list()
  for ii in xrange(left, right + 1):
    palindrome_list.append(str(ii))
  return palindrome_list  

def count_palindrome_ranges(palindrome_list):
  result = 0
  for end in xrange(1, len(palindrome_list) + 1):
    for start in xrange(0, len(palindrome_list)):
      if start + end > len(palindrome_list):
        break
      even_count = 0
      for ii in xrange(start, start + end):
        if palindrome_list[ii]:
          even_count += 1
      if even_count % 2 == 0:
        result += 1
  return result

test_cases = open(sys.argv[1], 'r').readlines()
for test in test_cases:
  test = test.strip()
  if len(test) != 0:
    left, right = map(int, test.split())
  print count_palindrome_ranges(palindrome_range(left, right))
