#!/usr/bin/python
import sys

class Node(object):
  def __init__(self, value):
    self.value = value
    self.left = None
    self.right = None

class Btree(object):
  def __init__(self):
    self.root = None

  def add_Node(self, value, root = None):
    root = self.root if root is None else root
    if self.root == None:
      self.root = Node(value)
    else:
      if value <= root.value:
        if root.left == None:
          root.left = Node(value)
        else:
          self.add_Node(value, root.left)
      elif value > root.value:
        if root.right == None:
          root.right = Node(value)
        else:
          self.add_Node(value, root.right)
      
  def lowAncestor(self, value_one, value_two, root = None):
    root = self.root if root is None else root
    if value_one > root.value and value_two > root.value:
      self.lowAncestor(value_one, value_two, root.right)
    elif value_one < root.value and value_two < root.value:
      self.lowAncestor(value_one, value_two, root.left)
    elif root.value == value_one or root.value == value_two:
      print root.value
    else:
      print root.value
    
def main():
  fp = open(sys.argv[1], 'r').readlines()
  fileContent = [ii.strip() for ii in fp]
  Tree = Btree()
  for ii in [30, 8, 52, 3, 20, 10, 29]:
    Tree.add_Node(ii)
  for content in fileContent:
    Tree.lowAncestor(int(content.split()[0]), int(content.split()[1]))

main()        
