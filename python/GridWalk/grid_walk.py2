"""
here is a monkey which can walk around on a planar grid. The monkey can move one space at a time left, right, up or down. That is, from (x, y) the monkey can go to (x+1, y), (x-1, y), (x, y+1), and (x, y-1). Points where the sum of the digits of the absolute value of the x coordinate plus the sum of the digits of the absolute value of the y coordinate are lesser than or equal to 19 are accessible to the monkey. For example, the point (59, 79) is inaccessible because 5 + 9 + 7 + 9 = 30, which is greater than 19. Another example: the point (-5, -7) is accessible because abs(-5) + abs(-7) = 5 + 7 = 12, which is less than 19. How many points can the monkey access if it starts at (0, 0), including (0, 0) itself?

"""

"""
The idea is to do a recursieve movement. , however, you move only if the point has not previosuly been covered and the constraints of the movement have been 
satisfied.
"""

movement_tracker = [[0,0]]

def move_permit(x, y):
  global movement_tracker
  if [x, y] in movement_tracker:
    total_sum = 20
  else:
    total_sum = 0
  for ii in [x, y]:
    total_sum += sum(map(int, list(str(abs(ii)))))
  return True if total_sum <= 19 else False

def grid_walker():
  global movement_tracker
  count_access = 0
  while movement_tracker:
    x, y = movement_tracker.pop(0)
    count_access += 1
    print count_access
    if move_permit(x + 1, y):
      movement_tracker.append([x + 1, y])
    if move_permit(x - 1, y):
      movement_tracker.append([x - 1, y])
    if move_permit(x, y + 1):
      movement_tracker.append([x, y + 1])
    if move_permit(x, y - 1):
      movement_tracker.append([x, y - 1])
  return count_access
  
def main():
  print grid_walker()

if __name__ == "__main__":
  main()
